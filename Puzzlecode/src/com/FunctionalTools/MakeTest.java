package com.FunctionalTools;

import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 The output lp file generated by this program is purely for testing purpose so , don't reuse that generated file any where
 keep this file in same directory where lp file is present 
 fill the field in bigfile.txt
 compile this file cmd prompt as " javac MakeTest.java "
 run this java file in cmd prompt " java MakeTest "
 make sure that java is installed on ur machine ..!! ;)
 */
class MakeTest {

    public static void main(String args[]) throws IOException {
        String encoding = "UTF-8";
        int maxlines = 500;
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new InputStreamReader(new FileInputStream("C:\\Users\\j1013563\\Documents\\NetBeansProjects\\Puzzlecode\\src\\com\\FunctionalTools\\temp.lp"), encoding));
            int count = 0;
            for (String line; (line = reader.readLine()) != null;) {
                if (count++ % maxlines == 0) {
                    if (writer != null) {
                        writer.close();
                    }
                    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("C:\\Users\\j1013563\\Documents\\NetBeansProjects\\Puzzlecode\\src\\com\\FunctionalTools\\test" + (count / maxlines) + ".lp"), encoding));
                }//[+][^+-]+ in notepad++
                String re1 = "(\\+)";	// Any Single Character 1
                String re2 = "(\\s+)";	// White Space 1
                String re3 = "(0)";	// Any Single Character 2
                String re4 = "( )";	// White Space 2
                String re5 = "[^!]*";   //any word without !!
                Pattern pattern = Pattern.compile(re1 + re2 + re3 + re4 + re5, Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
                Matcher matcher = pattern.matcher(line);
                String temp = matcher.replaceAll("");
                if (!"".equals(temp.trim())) {
                    writer.write(temp);
                    writer.newLine();
                }
            }
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
    }
}
